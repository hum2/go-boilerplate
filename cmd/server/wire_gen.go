// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	config2 "github.com/hum2/backend/internal/infrastructure/config"
	"github.com/hum2/backend/internal/infrastructure/db/ent"
	"github.com/hum2/backend/internal/infrastructure/repository/user"
	"github.com/hum2/backend/internal/interface/config"
	user3 "github.com/hum2/backend/internal/interface/controller/user"
	"github.com/hum2/backend/internal/interface/controller/user/gen"
	user2 "github.com/hum2/backend/internal/usecase/user"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	configConfig := config.New()
	config3 := config2.New()
	handler, err := ent.New(config3)
	if err != nil {
		return nil, err
	}
	transactionHandler := ent.NewTransaction(handler)
	repository := user.New(handler)
	usecase := user2.New(transactionHandler, repository)
	serverInterface := user3.New(usecase)
	app := NewApp(configConfig, serverInterface)
	return app, nil
}

// wire.go:

type App struct {
	Conf           *config.Config
	UserController gen.ServerInterface
}

func NewApp(
	conf *config.Config,
	userController gen.ServerInterface,
) *App {
	return &App{
		Conf:           conf,
		UserController: userController,
	}
}

var WireSet = wire.NewSet(config.New, config2.New, ent.New, ent.NewTransaction, user.New, user2.New, user3.New, NewApp)
