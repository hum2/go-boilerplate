openapi: 3.0.0
info:
  version: 1.0.0
  title: go-boilerplate
  description: TODO
  termsOfService: 'https://swagger.io/terms/'
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: 'https://swagger.io'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'http://localhost:8080'
tags:
  - name: user
    description: User operations
paths:
  /users:
    get:
      summary: Returns all users
      operationId: GetUsers
      description: Returns all users from the system that the user has access to
      tags:
        - user
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user:
    post:
      summary: Creates a new user
      operationId: PostUser
      description: Creates a new user
      tags:
        - user
      requestBody:
        description: User to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserRequest'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/user/{id}':
    get:
      summary: Get user by user id
      operationId: GetUser
      description: Get user by user id
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a new user
      operationId: PutUser
      description: Updates a user
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      requestBody:
        description: User to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutUserRequest'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: delete a new user
      operationId: DeleteUser
      description: Deletes a user
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      requestBody:
        description: User to delete to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutUserRequest'
      responses:
        '200':
          description: pet response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  parameters:
    UserIdParameter:
      name: id
      in: path
      description: ID of pet to fetch
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    PostUserRequest:
      properties:
        id:
          type: string
        name:
          type: string
        birthday:
          type: string
      required:
        - id
        - name
        - birthday
    PutUserRequest:
      properties:
        name:
          type: string
        birthday:
          type: string
      required:
        - name
        - birthday
    ErrorResponse:
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message
      required:
        - code
        - message
    UserResponse:
      properties:
        id:
          type: string
        name:
          type: string
        birthday:
          type: string
      required:
        - id
        - name
        - birthday
